/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MeetingSchedulingSystem;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author kensch
 */
public class Meetings extends javax.swing.JFrame {

    private String meetingName; // name of meeting
    private int meetingTime;    // time of meetings
    private boolean removingMeeting;    // flag that user is currently removing a meeting
    People people;  // instance of people window in each meeting
    private Room room;  // room that gets passed in with constructor
    MyMouseListener listener; // handles clicking on each meeting panel
    Color defaultColor;

    /**
     * Creates new form Meetings
     */
    public Meetings(Room room) {
        initComponents();
        this.room = room;   // room is passed as an argument

        setTitle(room.toString());  // set the title to the room that these meetings represent

        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // hide on close instead of disposing the jframe
        removingMeeting = false;
        defaultColor = removeMeetingButton.getBackground();

        render(); // refresh
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        meetingContainerPanel = new javax.swing.JPanel();
        addMeetingButton = new javax.swing.JButton();
        removeMeetingButton = new javax.swing.JButton();
        removeAllMeetingsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        meetingContainerPanel.setBackground(new java.awt.Color(153, 153, 255));
        meetingContainerPanel.setPreferredSize(new java.awt.Dimension(600, 300));
        meetingContainerPanel.setLayout(new java.awt.GridLayout(1, 4, 10, 10));

        addMeetingButton.setText("Add Meeting");
        addMeetingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMeetingButtonActionPerformed(evt);
            }
        });

        removeMeetingButton.setText("Remove Meeting");
        removeMeetingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMeetingButtonActionPerformed(evt);
            }
        });

        removeAllMeetingsButton.setText("Remove All Meetings");
        removeAllMeetingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllMeetingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(meetingContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addMeetingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeMeetingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAllMeetingsButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMeetingButton)
                    .addComponent(removeMeetingButton)
                    .addComponent(removeAllMeetingsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meetingContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeMeetingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMeetingButtonActionPerformed
        if (isRemovingMeeting()) {  // user can cancel removing a room
            removeMeetingButton.setBackground(defaultColor);
            removeMeetingButton.setText("Remove Meeting");
            setRemovingMeeting(false);
        } else if (!isRemovingMeeting()) {
            removeMeetingButton.setBackground(Color.red);
            removeMeetingButton.setText("Removing Meeting");
            setRemovingMeeting(true);
        }
    }//GEN-LAST:event_removeMeetingButtonActionPerformed

    private void addMeetingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMeetingButtonActionPerformed
        // ask user for meeting information
        try {
            String input;

            do {
                input = JOptionPane.showInputDialog("Enter meeting name");
            } while (input.isEmpty());
            setMeetingName(input);

            try {
                boolean occupied;
                do {
                    occupied = false;
                    input = JOptionPane.showInputDialog("Enter meeting time (enter the hour in military time)");    // can't be < 0 and > 23
                    for (Meeting currentMeeting : room.getMeetings()) {
                        if (currentMeeting.getTime() == Integer.parseInt(input)) {  // if time is occupied, redo
                            occupied = true;
                            JOptionPane.showMessageDialog(this, "The time slot " + Integer.parseInt(input) + " is occupied!");
                        }
                    }
                } while (input.isEmpty() || Integer.parseInt(input) < 0 || Integer.parseInt(input) > 23 || occupied);

                setMeetingTime(Integer.parseInt(input));

                Meeting meeting = new Meeting(getMeetingName(), getMeetingTime());
                getRoom().getMeetings().add(meeting);
                render();
            } catch (NumberFormatException e) {
                System.err.println("NumberFormatException");
            }
        } catch (NullPointerException e) {
            System.err.println("NullPointerException");
        }
    }//GEN-LAST:event_addMeetingButtonActionPerformed

    private void removeAllMeetingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllMeetingsButtonActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "Would you like to remove all meetings for " + getRoom().toString() + '?', "Removing All Meetings", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            getRoom().getMeetings().clear();
        }
        render();
    }//GEN-LAST:event_removeAllMeetingsButtonActionPerformed

    private void render() {
        getMeetingContainerPanel().removeAll(); // refresh inside of panel

        getMeetingContainerPanel().setLayout(new GridLayout(0, 4));  // 4 columns, unlimited rows

        listener = new MyMouseListener();

        for (Meeting currentMeeting : getRoom().getMeetings()) { // iterate through each room in the arraylist
            if (currentMeeting.getMouseListeners().length == 0) {
                currentMeeting.addMouseListener(listener);
            }
            getMeetingContainerPanel().add(currentMeeting);  // add current room to roomcontainerpanel
        }
        
        getMeetingContainerPanel().revalidate();   // refresh
        getMeetingContainerPanel().repaint();      // refresh

        pack();
        setVisible(true);   // make panel show up without having to resize frame
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Meetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Meetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Meetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Meetings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new Meetings(room).setVisible(true);
            }
        });
    }

    private class MyMouseListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {

        }

        @Override
        public void mousePressed(MouseEvent e) {
            if (isRemovingMeeting()) { // user is removing the room they clicked on
                setRemovingMeeting(false);
                removeMeetingButton.setBackground(defaultColor);
                removeMeetingButton.setText("Remove Meeting");
                getRoom().getMeetings().remove(getRoom().getMeetings().indexOf(e.getSource()));
                render();
            } else // user is NOT removing the room that they clicked on
            if (people == null || people.getMeeting() != room.getMeetings().get(room.getMeetings().indexOf(e.getSource()))) {
                people = new People(getRoom().getMeetings().get(getRoom().getMeetings().indexOf(e.getSource())));
            } else {
                people.setVisible(true);
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }

    /**
     * @return the removingMeeting
     */
    public boolean isRemovingMeeting() {
        return this.removingMeeting;
    }

    /**
     * @param removingMeeting the removingMeeting to set
     */
    public void setRemovingMeeting(boolean removingMeeting) {
        this.removingMeeting = removingMeeting;
    }

    /**
     * @return the meetingContainerPanel
     */
    public javax.swing.JPanel getMeetingContainerPanel() {
        return meetingContainerPanel;
    }

    /**
     * @param meetingContainerPanel the meetingContainerPanel to set
     */
    public void setMeetingContainerPanel(javax.swing.JPanel meetingContainerPanel) {
        this.meetingContainerPanel = meetingContainerPanel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMeetingButton;
    private javax.swing.JPanel meetingContainerPanel;
    private javax.swing.JButton removeAllMeetingsButton;
    private javax.swing.JButton removeMeetingButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the room
     */
    public Room getRoom() {
        return room;
    }

    /**
     * @param room the room to set
     */
    public void setRoom(Room room) {
        this.room = room;
    }

    /**
     * @return the meetingName
     */
    public String getMeetingName() {
        return meetingName;
    }

    /**
     * @param meetingName the meetingName to set
     */
    public void setMeetingName(String meetingName) {
        this.meetingName = meetingName;
    }

    /**
     * @return the meetingTime
     */
    public int getMeetingTime() {
        return meetingTime;
    }

    /**
     * @param meetingTime the meetingTime to set
     */
    public void setMeetingTime(int meetingTime) {
        this.meetingTime = meetingTime;
    }

    /**
     * @return the addMeetingButton
     */
    public javax.swing.JButton getAddMeetingButton() {
        return addMeetingButton;
    }

    /**
     * @param addMeetingButton the addMeetingButton to set
     */
    public void setAddMeetingButton(javax.swing.JButton addMeetingButton) {
        this.addMeetingButton = addMeetingButton;
    }

    /**
     * @return the meetingContainerLayout
     */
    public javax.swing.JPanel getMeetingContainerLayout() {
        return getMeetingContainerPanel();
    }

    /**
     * @param meetingContainerLayout the meetingContainerLayout to set
     */
    public void setMeetingContainerLayout(javax.swing.JPanel meetingContainerLayout) {
        this.setMeetingContainerPanel(meetingContainerLayout);
    }

    /**
     * @return the removeMeetingButton
     */
    public javax.swing.JButton getRemoveMeetingButton() {
        return removeMeetingButton;
    }

    /**
     * @param removeMeetingButton the removeMeetingButton to set
     */
    public void setRemoveMeetingButton(javax.swing.JButton removeMeetingButton) {
        this.removeMeetingButton = removeMeetingButton;
    }
}
