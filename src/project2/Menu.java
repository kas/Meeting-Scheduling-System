/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InvalidClassException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author kensch
 */
public class Menu extends javax.swing.JFrame {

    Rooms main; // holds the Rooms object that is created first
    ArrayList<Room> rooms;   // holds arraylist of rooms
    ArrayList<Meeting> meetings = new ArrayList<Meeting>(); // holds arraylist of meetings
    ArrayList<Person> people = new ArrayList<Person>();
    DefaultListModel<String> meetingsModel = new DefaultListModel<String>();    // lets us translate arraylists of meetings etc into JLists
    DefaultListModel<String> roomsModel = new DefaultListModel<String>();
    DefaultListModel<String> peopleModel = new DefaultListModel<String>();
    boolean selectedRoom = false, selectedPerson = false;   // helps us narrow down what type the left (variable/changeable) jlist holds

    Menu(ArrayList<Room> rooms, Rooms room) {   // constructor
        initComponents();
        this.rooms = rooms;
        this.main = room;
        setTitle("Menu");
        meetingsOptionsPanel.setBorder(BorderFactory.createTitledBorder("Showing meetings for"));

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        variableList.setVisibleRowCount(3);
        meetingsList.setVisibleRowCount(3);

        render();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        meetingsOptionsPanel = new javax.swing.JPanel();
        entireDayButton = new javax.swing.JButton();
        selectedRoomButton = new javax.swing.JButton();
        selectedPersonButton = new javax.swing.JButton();
        specificTimeSlotButton = new javax.swing.JButton();
        savePanel = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        meetingsScrollPane = new javax.swing.JScrollPane();
        meetingsList = new javax.swing.JList<>();
        variableScrollPane = new javax.swing.JScrollPane();
        variableList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        entireDayButton.setText("Entire Day");
        entireDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entireDayButtonActionPerformed(evt);
            }
        });

        selectedRoomButton.setText("Selected Room");
        selectedRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedRoomButtonActionPerformed(evt);
            }
        });

        selectedPersonButton.setText("Selected Person");
        selectedPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedPersonButtonActionPerformed(evt);
            }
        });

        specificTimeSlotButton.setText("Specific Time Slot");
        specificTimeSlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specificTimeSlotButtonActionPerformed(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout savePanelLayout = new javax.swing.GroupLayout(savePanel);
        savePanel.setLayout(savePanelLayout);
        savePanelLayout.setHorizontalGroup(
            savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(savePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        savePanelLayout.setVerticalGroup(
            savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(savePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout meetingsOptionsPanelLayout = new javax.swing.GroupLayout(meetingsOptionsPanel);
        meetingsOptionsPanel.setLayout(meetingsOptionsPanelLayout);
        meetingsOptionsPanelLayout.setHorizontalGroup(
            meetingsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingsOptionsPanelLayout.createSequentialGroup()
                .addGroup(meetingsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(meetingsOptionsPanelLayout.createSequentialGroup()
                        .addComponent(entireDayButton)
                        .addGap(0, 0, 0)
                        .addComponent(selectedRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedPersonButton)
                        .addGap(0, 0, 0)
                        .addComponent(specificTimeSlotButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(meetingsOptionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(savePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        meetingsOptionsPanelLayout.setVerticalGroup(
            meetingsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(meetingsOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(savePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(meetingsOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entireDayButton)
                    .addComponent(selectedRoomButton)
                    .addComponent(selectedPersonButton)
                    .addComponent(specificTimeSlotButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        meetingsScrollPane.setViewportView(meetingsList);

        variableScrollPane.setViewportView(variableList);

        jLabel1.setText("Meetings ->");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(variableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 252, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(meetingsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(meetingsOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(meetingsOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(meetingsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(variableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 60, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entireDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entireDayButtonActionPerformed
        // This will show the meetings for the entire day, hiding the left jlist and only showing the meetings in the right jlist

        selectedRoom = false;   // we did not use the "Select Room" or "Select Person" buttons
        selectedPerson = false;

        variableList.clearSelection();  // do not select anything in the left jlist, as this can cause an unneccessary valueChanged event in the jlist which can cause errors

        variableList.setVisible(false); // we don't need the left list and label, so we hide them
        jLabel2.setVisible(false);

        meetingsModel.clear();  // clear the model and arraylist
        meetings.clear();

        for (Room currentRoom : rooms) {    // gather all meetings up
            for (Meeting currentMeeting : currentRoom.getMeetings()) {
                meetings.add(currentMeeting);
            }
        }
        for (Meeting m : meetings) {    // add each meeting to the model
            meetingsModel.addElement(m.getName());
        }
        meetingsList.setModel(meetingsModel);   // set the model to the jlist

        render();   // refresh that puppy
    }//GEN-LAST:event_entireDayButtonActionPerformed

    private void selectedRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedRoomButtonActionPerformed
        // this one will populate the left list with rooms and when a user clicks one of those rooms, the right jlist will show the meetings in that room

        // rooms has all the rooms, so we add them to the variableList
        selectedPerson = false; // set to false before unselecting the variablelist
        selectedRoom = false;

        variableList.clearSelection();  // clear the variablelist selection

        selectedRoom = true;    // now we are enabling that variable

        variableList.setVisible(true);  // we need the left list and label so we make them visible
        jLabel2.setVisible(true);

        jLabel2.setText("<- Select a Room");    // set text of left label, giving instructions to user

        roomsModel.clear(); // clear models and arraylist
        meetingsModel.clear();
        meetings.clear();

        for (Room r : rooms) {  // gather all rooms
            roomsModel.addElement(r.toString());
        }
        variableList.setModel(roomsModel);  // add the rooms to the left list

        for (Room r : rooms) {
            for (Meeting m : r.getMeetings()) { // gather all meetings
                meetings.add(m);
            }
        }
        for (Meeting m : meetings) {
            meetingsModel.addElement(m.getName());  // add meetings to model
        }
        meetingsList.setModel(meetingsModel);   // add model to list

        variableList.addListSelectionListener(new ListClickListener()); // add listener to left list to check for selection changes

        render();   // refresh
    }//GEN-LAST:event_selectedRoomButtonActionPerformed

    private void selectedPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedPersonButtonActionPerformed
        // this one will populate the left list with people, user clicks on person, shows all meetings for person

        selectedRoom = false;
        selectedPerson = false;

        variableList.clearSelection();  // same as above

        selectedPerson = true;

        variableList.setVisible(true);
        jLabel2.setVisible(true);

        jLabel2.setText("<- Select a Person");

        meetings.clear();
        meetingsModel.clear();  // clear more models and arraylists
        peopleModel.clear();
        people.clear();

        for (Room r : rooms) {
            for (Meeting m : r.getMeetings()) {
                for (Person p : m.getPeople()) {    // get all people
                    peopleModel.addElement(p.getFirstName() + ' ' + p.getLastName()); // format name into correct string, add to model
                }
            }
        }
        variableList.setModel(peopleModel); // add model to left list

        for (Room r : rooms) {
            for (Meeting m : r.getMeetings()) { // get all meetings
                meetings.add(m);
            }
        }

        for (Meeting m : meetings) {
            meetingsModel.addElement(m.getName());  // add meetings to model
        }
        meetingsList.setModel(meetingsModel);   // add model to right list

        variableList.addListSelectionListener(new ListClickListener()); // new listener

        render();
    }//GEN-LAST:event_selectedPersonButtonActionPerformed

    private void specificTimeSlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specificTimeSlotButtonActionPerformed
        // this one prompts user to enter a time in 24h format.  hides left list and label, and populates all the corresponding meetings into the right list

        selectedRoom = false;
        selectedPerson = false;

        variableList.clearSelection(); // same as above buttons

        variableList.setVisible(false);

        try {
            String input;
            do {
                input = JOptionPane.showInputDialog("Enter meeting time (enter the hour in miltary time)"); // get input.  must not be empty, can't be less than 0 and > 23
            } while (input.isEmpty() || Integer.parseInt(input) < 0 || Integer.parseInt(input) > 23);

            int time = Integer.parseInt(input);

            jLabel2.setText("Time: " + time + 'h');

            meetings.clear();
            meetingsModel.clear();

            for (Room r : rooms) {
                for (Meeting m : r.getMeetings()) {
                    if (m.getTime() == time) {  // collect meetings where the time of the meeting matches the time that we're looking for
                        meetings.add(m);
                    }
                }
            }
            for (Meeting m : meetings) {
                meetingsModel.addElement(m.getName());  // add those meetings to the model
            }
            meetingsList.setModel(meetingsModel);   // add model to list
        } catch (NumberFormatException e) {
            System.err.println("NumberFormatException");
        } catch (NullPointerException e) {
            System.err.println("NullPointerException");
        }
    }//GEN-LAST:event_specificTimeSlotButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        variableList.clearSelection();  // just in case, clear the selection of the left list

        try {
            FileInputStream fileIn = new FileInputStream("/tmp/data.ser");  // save data here
            ObjectInputStream in = new ObjectInputStream(fileIn);   // create new stream
            rooms = (ArrayList<Room>) in.readObject(); // cast object that's coming in to an ArrayList<Room>
            in.close(); // close the file and the stream
            fileIn.close();

//            System.out.println(rooms.toString());
            main.setRooms(rooms);   // access the main (supermost) class, and set the rooms directly
            main.render();  // refresh the view

            System.out.printf("Serialized data is opened from data.ser");
        } catch (InvalidClassException i) {
            System.err.println("InvalidClassException");
        } catch (IOException i) {
            i.printStackTrace();
            return;
        } catch (ClassNotFoundException c) {
            System.out.println("ArrayList<Room> class not found");
            c.printStackTrace();
            return;
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        variableList.clearSelection();  // again, just in case

        try {
            FileOutputStream fileOut = new FileOutputStream("/tmp/data.ser");   // open output file
            ObjectOutputStream out = new ObjectOutputStream(fileOut);   // output stream
            out.writeObject(main.getRooms());   // output the object
            out.close();    // close the output
            fileOut.close();    // close the file
            System.out.printf("Serialized data is saved in data.ser");
        } catch (IOException i) {
            i.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private class ListClickListener implements ListSelectionListener {

        public ListClickListener() {
        }

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (selectedRoom || selectedPerson) {   // differentiate between what kind of valuechanged event it was
                meetings.clear();   // clear model and arraylist
                meetingsModel.clear();

                if (selectedRoom) { // if variableList is of type Room
                    Room room = rooms.get(variableList.getSelectedIndex()); // get the room object that is selected in the list
                    for (Meeting currentMeeting : room.getMeetings()) {
                        meetings.add(currentMeeting);   // get the meetings in that room, add to arraylist
                    }
                } else if (selectedPerson) {
                    // if variableList is of type Person
                    for (Room room : rooms) {
                        for (Meeting currentMeeting : room.getMeetings()) {
                            for (Person currentPerson : currentMeeting.getPeople()) {
                                if (currentPerson.toString().equals(variableList.getSelectedValue())) { // check EACH person against the selected person
                                    meetings.add(currentMeeting);   // if the person matches up, throw the meeting into the arraylist
                                }
                            }
                        }
                    }
                }

                for (Meeting m : meetings) {
                    meetingsModel.addElement(m.getName());  // turn array into the model
                }

                meetingsList.setModel(meetingsModel);   // add the model to the list
                render();       // refresh the view
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton entireDayButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> meetingsList;
    private javax.swing.JPanel meetingsOptionsPanel;
    private javax.swing.JScrollPane meetingsScrollPane;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel savePanel;
    private javax.swing.JButton selectedPersonButton;
    private javax.swing.JButton selectedRoomButton;
    private javax.swing.JButton specificTimeSlotButton;
    private javax.swing.JList<String> variableList;
    private javax.swing.JScrollPane variableScrollPane;
    // End of variables declaration//GEN-END:variables

    private void render() {
        pack();
        setVisible(true);
    }
}
