/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author kensch
 */
public class People extends javax.swing.JFrame {

    private Meeting meeting;    // passed from constructor
    private boolean removingPerson;   // flag that user is currently removing a person from this meeting
    private String personFirstName, personLastName; // first and lastname of person
    private int personPhoneNumber;  // phonenumber of person
    MyMouseListener listener;   // handles press events of mouse on person panels
    Color defaultColor;

    /**
     * Creates new form People
     */
    public People(Meeting meeting) {     // constructor
        initComponents();
        this.meeting = meeting;

        setTitle(meeting.getName());

        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        removingPerson = false;

        defaultColor = removePersonButton.getBackground();

        render();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addPersonButton = new javax.swing.JButton();
        removePersonButton = new javax.swing.JButton();
        personContainerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        addPersonButton.setText("Add Person");
        addPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersonButtonActionPerformed(evt);
            }
        });

        removePersonButton.setText("Remove Person");
        removePersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePersonButtonActionPerformed(evt);
            }
        });

        personContainerPanel.setBackground(new java.awt.Color(153, 153, 255));
        personContainerPanel.setSize(new java.awt.Dimension(328, 291));
        personContainerPanel.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addPersonButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removePersonButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(personContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPersonButton)
                    .addComponent(removePersonButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(personContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersonButtonActionPerformed
        // validate against all other meetings
        boolean occupied;
        try {
            do {
                occupied = false;
                String input;
                do {
                    input = JOptionPane.showInputDialog("Enter person first name");
                } while (input.isEmpty());

                setPersonFirstName(input);  // null pointer

                try {
                    do {
                        input = JOptionPane.showInputDialog("Enter person last name");
                    } while (input.isEmpty());

                    setPersonLastName(input); // null pointer

                    for (Room currentRoom : Rooms.getRooms()) {     // make sure that the person is not being added to two meetings during the same time
                        for (Meeting currentMeeting : currentRoom.getMeetings()) {
                            for (Person currentPerson : currentMeeting.getPeople()) {
                                if (currentPerson.toString().equals(getPersonFirstName() + ' ' + getPersonLastName())) {
                                    if (currentMeeting.getTime() == getMeeting().getTime()) {
                                        occupied = true;    // if the person is at another meeting at this time, set occupied to true
                                        JOptionPane.showMessageDialog(this, "This person is already at a meeting during this time!");
                                    }
                                }
                            }
                        }
                    }

                    try {
                        if (!occupied) {
                            do {
                                input = JOptionPane.showInputDialog("Enter person phone number (numbers only)");
                            } while (input.isEmpty());
                        }

                        setPersonPhoneNumber(Integer.parseInt(input));

                        Person person = new Person(getPersonFirstName(), getPersonLastName(), getPersonPhoneNumber());
                        getMeeting().getPeople().add(person);
                        render();
                    } catch (NullPointerException e) {
                        System.err.println("NullPointerException");
                    } catch (NumberFormatException e) {
                        System.err.println("NumberFormatException");
                    }
                } catch (NullPointerException e) {
                    System.err.println("NullPointerException");
                }
            } while (occupied);
        } catch (NullPointerException e) {
            System.err.println("NullPointerException");
        }
    }//GEN-LAST:event_addPersonButtonActionPerformed

    private void removePersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePersonButtonActionPerformed
        if (isRemovingPerson()) {
            removePersonButton.setBackground(defaultColor);
            removePersonButton.setText("Remove Person");
            setRemovingPerson(false);
        } else if (!isRemovingPerson()) {
            removePersonButton.setBackground(Color.red);
            removePersonButton.setText("Removing Person");
            setRemovingPerson(true);
        }
    }//GEN-LAST:event_removePersonButtonActionPerformed

    private void render() {
        getPersonContainerPanel().removeAll(); // refresh inside of panel

        getPersonContainerPanel().setLayout(new GridLayout(0, 4));  // 4 columns, unlimited rows

        listener = new MyMouseListener();

        for (Person currentPerson : getMeeting().getPeople()) { // iterate through each room in the arraylist
            if (currentPerson.getMouseListeners().length == 0) {
                currentPerson.addMouseListener(listener);
            }
            getPersonContainerPanel().add(currentPerson);  // add current room to roomcontainerpanel
        }
        
        getPersonContainerPanel().revalidate();   // refresh
        getPersonContainerPanel().repaint();      // refresh

        pack();
        setVisible(true);   // make panel show up without having to resize frame
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(People.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(People.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(People.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(People.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Peopl2().setVisible(true);
            }
        });
    }

    private class MyMouseListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {

        }

        @Override
        public void mousePressed(MouseEvent e) {
            if (isRemovingPerson()) { // user is removing the room they clicked on
                setRemovingPerson(false);
                removePersonButton.setBackground(defaultColor);
                removePersonButton.setText("Remove Person");
                getMeeting().getPeople().remove(getMeeting().getPeople().indexOf(e.getSource()));
                render();
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }

    }

    /**
     * @return the meeting
     */
    public Meeting getMeeting() {
        return meeting;
    }

    /**
     * @param meeting the meeting to set
     */
    public void setMeeting(Meeting meeting) {
        this.meeting = meeting;
    }

    /**
     * @return the removingPerson
     */
    public boolean isRemovingPerson() {
        return this.removingPerson;
    }

    /**
     * @param removingPerson the removingPerson to set
     */
    public void setRemovingPerson(boolean removingPerson) {
        this.removingPerson = removingPerson;
    }

    /**
     * @return the personFirstName
     */
    public String getPersonFirstName() {
        return personFirstName;
    }

    /**
     * @param personFirstName the personFirstName to set
     */
    public void setPersonFirstName(String personFirstName) {
        this.personFirstName = personFirstName;
    }

    /**
     * @return the personLastName
     */
    public String getPersonLastName() {
        return personLastName;
    }

    /**
     * @param personLastName the personLastName to set
     */
    public void setPersonLastName(String personLastName) {
        this.personLastName = personLastName;
    }

    /**
     * @return the personPhoneNumber
     */
    public int getPersonPhoneNumber() {
        return personPhoneNumber;
    }

    /**
     * @param personPhoneNumber the personPhoneNumber to set
     */
    public void setPersonPhoneNumber(int personPhoneNumber) {
        this.personPhoneNumber = personPhoneNumber;
    }

    /**
     * @return the addPersonButton
     */
    public javax.swing.JButton getAddPersonButton() {
        return addPersonButton;
    }

    /**
     * @param addPersonButton the addPersonButton to set
     */
    public void setAddPersonButton(javax.swing.JButton addPersonButton) {
        this.addPersonButton = addPersonButton;
    }

    /**
     * @return the personContainerPanel
     */
    public javax.swing.JPanel getPersonContainerPanel() {
        return personContainerPanel;
    }

    /**
     * @param personContainerPanel the personContainerPanel to set
     */
    public void setPersonContainerPanel(javax.swing.JPanel personContainerPanel) {
        this.personContainerPanel = personContainerPanel;
    }

    /**
     * @return the removePersonButton
     */
    public javax.swing.JButton getRemovePersonButton() {
        return removePersonButton;
    }

    /**
     * @param removePersonButton the removePersonButton to set
     */
    public void setRemovePersonButton(javax.swing.JButton removePersonButton) {
        this.removePersonButton = removePersonButton;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPersonButton;
    private javax.swing.JPanel personContainerPanel;
    private javax.swing.JButton removePersonButton;
    // End of variables declaration//GEN-END:variables
}
