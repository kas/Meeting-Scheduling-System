/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project2;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author kensch
 */
public class Rooms extends javax.swing.JFrame {

    private int roomNumber; // roomnumber that user enters when prompted
    private static ArrayList<Room> rooms = new ArrayList<>(); // arraylist of room objects, contains each room in the schedule
    private boolean removingRoom;    // flag that user is currently removing a room
    MyMouseListener listener; // handles mouse press events on each panel
    Meetings meetings;   // the jframe that is opened when user presses a room
    // declared here to check if it is null or not
    // if null, call new
    // else, show hidden window
    Color defaultColor; // default color of a JButton

    /**
     * Creates new form Rooms
     */
    public Rooms() {
        initComponents();
        setTitle("Rooms");
        getRoomContainerPanel().setLayout(new GridLayout(0, 4));  // 4 columns, unlimited rows
        removingRoom = false;
        defaultColor = removeRoomButton.getBackground();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomContainerPanel = new javax.swing.JPanel();
        addRoomButton = new javax.swing.JButton();
        removeRoomButton = new javax.swing.JButton();
        menuButton = new javax.swing.JButton();
        specifyRoomsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(610, 385));
        setResizable(false);

        roomContainerPanel.setBackground(new java.awt.Color(153, 153, 255));
        roomContainerPanel.setPreferredSize(new java.awt.Dimension(500, 500));
        roomContainerPanel.setLayout(new java.awt.GridLayout(1, 4, 10, 10));

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        removeRoomButton.setText("Remove Room");
        removeRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoomButtonActionPerformed(evt);
            }
        });

        menuButton.setText("Menu");
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        specifyRoomsButton.setText("Specify Rooms");
        specifyRoomsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specifyRoomsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addRoomButton)
                        .addGap(0, 0, 0)
                        .addComponent(removeRoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specifyRoomsButton))
                    .addComponent(roomContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(menuButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRoomButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(removeRoomButton)
                        .addComponent(specifyRoomsButton)))
                .addComponent(roomContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // ask for room number
        try {
            String input;

            do {
                input = JOptionPane.showInputDialog("Enter room number");   // prompt for number
            } while (input.isEmpty() || Integer.parseInt(input) < 1);   // must not be empty or < 1

            setRoomNumber(Integer.parseInt(input));

            Room room = new Room(getRoomNumber()); // create new room with given roomnumber
            getRooms().add(room); // add room to rooms arraylist       
            render();  // refresh room panels
        } catch (NumberFormatException e) {
            System.err.println("NumberFormatException");
        } catch (NullPointerException e) {
            System.err.println("NullPointerException");
        }
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void removeRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoomButtonActionPerformed
        if (isRemovingRoom()) { // allow user to undo removing room
            removeRoomButton.setBackground(defaultColor);
            removeRoomButton.setText("Remove Room");
            setRemovingRoom(false);
        } else if (!isRemovingRoom()) {
            removeRoomButton.setBackground(Color.red);
            removeRoomButton.setText("Removing Room");
            setRemovingRoom(true);
        }
    }//GEN-LAST:event_removeRoomButtonActionPerformed

    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        Menu menu = new Menu(getRooms(), this); // open new menu window

    }//GEN-LAST:event_menuButtonActionPerformed

    private void specifyRoomsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specifyRoomsButtonActionPerformed
        // if no rooms:
        if (rooms.isEmpty()) {
            try {
                String input;

                do {
                    input = JOptionPane.showInputDialog("Enter number of rooms to add");   // prompt for number
                } while (input.isEmpty() || Integer.parseInt(input) < 1);   // must not be empty or < 1
                
                for (int x = 1; x <= Integer.parseInt(input); x++) {
                    setRoomNumber(x);
                    Room room = new Room(getRoomNumber()); // create new room with given roomnumber
                    getRooms().add(room); // add room to rooms arraylist       
                }
                
                render();  // refresh room panels
            } catch (NumberFormatException e) {
                System.err.println("NumberFormatException");
            } catch (NullPointerException e) {
                System.err.println("NullPointerException");
            }
        } else {    // not empty
            JOptionPane.showMessageDialog(null, "Existing rooms found, please remove all rooms.", "Existing Rooms Found", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_specifyRoomsButtonActionPerformed

    void render() {
        getRoomContainerPanel().removeAll(); // clear inside of panel

        listener = new MyMouseListener();   // initialize mouse listener

        for (Room currentRoom : getRooms()) { // iterate through each room in the arraylist
            if (currentRoom.getMouseListeners().length == 0) {  // if there are no mouse listeners currently, add a mouse listener
                currentRoom.addMouseListener(listener);
            }
            getRoomContainerPanel().add(currentRoom);  // add current room to roomcontainerpanel
        }

        getRoomContainerPanel().revalidate();   // refresh
        getRoomContainerPanel().repaint();      // refresh

        pack();
        setVisible(true);   // make panel show up without having to resize frame
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Rooms().setVisible(true);
            }
        });
    }

    private class MyMouseListener implements MouseListener {

        @Override
        public void mouseClicked(MouseEvent e) {

        }

        @Override
        public void mousePressed(MouseEvent e) {    // mousepressed works better than mouse clicked
            if (isRemovingRoom()) { // user is removing the room they clicked on
                setRemovingRoom(false); // done removing room now
                removeRoomButton.setBackground(defaultColor);
                removeRoomButton.setText("Remove Room");
                if (getRooms().get(getRooms().indexOf(e.getSource())).getMeetings().isEmpty()) {    // if no meetings in room
                    getRooms().remove(getRooms().indexOf(e.getSource()));   // remove room from arraylist
                } else {
                    JOptionPane.showMessageDialog(null, "Please remove all existing meetings from this room.", "Existing Meetings Found", JOptionPane.INFORMATION_MESSAGE);
                }
                
                render();   // refresh view
            } else // user is NOT removing the room that they clicked on
            // show meetings list for the room that was clicked
            {
                if (meetings == null || meetings.getRoom() != getRooms().get(getRooms().indexOf(e.getSource()))) {  // create new meetings window if one wasn't created already -- else, set the window to be visible.
                    meetings = new Meetings(getRooms().get(getRooms().indexOf(e.getSource())));
                } else {
                    meetings.setVisible(true);
                }
            }
        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }

    /**
     * @return the roomNumber
     */
    public int getRoomNumber() {
        return roomNumber;
    }

    /**
     * @param roomNumber the roomNumber to set
     */
    public void setRoomNumber(int roomNumber) {
        this.roomNumber = roomNumber;
    }

    /**
     * @return the rooms
     */
    public static ArrayList<Room> getRooms() {
        return rooms;
    }

    /**
     * @param rooms the rooms to set
     */
    public void setRooms(ArrayList<Room> rooms) {
        this.rooms = rooms;
    }

    /**
     * @return the addRoomButton
     */
    public javax.swing.JButton getAddRoomButton() {
        return addRoomButton;
    }

    /**
     * @param addRoomButton the addRoomButton to set
     */
    public void setAddRoomButton(javax.swing.JButton addRoomButton) {
        this.addRoomButton = addRoomButton;
    }

    /**
     * @return the menuButton
     */
    public javax.swing.JButton getMenuButton() {
        return menuButton;
    }

    /**
     * @param menuButton the menuButton to set
     */
    public void setMenuButton(javax.swing.JButton menuButton) {
        this.menuButton = menuButton;
    }

    /**
     * @return the removeRoomButton
     */
    public javax.swing.JButton getRemoveRoomButton() {
        return removeRoomButton;
    }

    /**
     * @param removeRoomButton the removeRoomButton to set
     */
    public void setRemoveRoomButton(javax.swing.JButton removeRoomButton) {
        this.removeRoomButton = removeRoomButton;
    }

    /**
     * @return the roomContainerPanel
     */
    public javax.swing.JPanel getRoomContainerPanel() {
        return roomContainerPanel;
    }

    /**
     * @param roomContainerPanel the roomContainerPanel to set
     */
    public void setRoomContainerPanel(javax.swing.JPanel roomContainerPanel) {
        this.roomContainerPanel = roomContainerPanel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoomButton;
    private javax.swing.JButton menuButton;
    private javax.swing.JButton removeRoomButton;
    private javax.swing.JPanel roomContainerPanel;
    private javax.swing.JButton specifyRoomsButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the removingRoom
     */
    public boolean isRemovingRoom() {
        return this.removingRoom;
    }

    /**
     * @param removingRoom the removingRoom to set
     */
    public void setRemovingRoom(boolean removingRoom) {
        this.removingRoom = removingRoom;
    }
}
